<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Folder Tabs with Items, Counters & "All" View</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
    }
    .folder-bar {
      position: fixed;
      top: 0;
      width: 100%;
      background-color: #f1f1f1;
      border-bottom: 2px solid #ccc;
      display: flex;
      padding: 0 10px;
      z-index: 1000;
    }
    .folder-tab {
      background-color: #e0e0e0;
      padding: 10px 20px;
      margin: 10px 5px 0 0;
      border: 1px solid #ccc;
      border-bottom: none;
      border-top-left-radius: 5px;
      border-top-right-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    .folder-tab:hover {
      background-color: #d5d5d5;
    }
    .folder-tab.active {
      background-color: white;
      font-weight: bold;
      border-bottom: 2px solid white;
    }
    .content {
      padding: 80px 20px 20px;
    }
    .folder-content, .nested-content {
      display: none;
    }
    .folder-content.active, .nested-content.active {
      display: block;
    }
    .nested-bar {
      margin-top: 10px;
      border-bottom: 1px solid #ccc;
      display: flex;
      gap: 5px;
      flex-wrap: wrap;
    }
    .nested-tab {
      background-color: #ddd;
      padding: 6px 15px;
      border: 1px solid #bbb;
      border-radius: 3px 3px 0 0;
      cursor: pointer;
    }
    .nested-tab:hover {
      background-color: #ccc;
    }
    .nested-tab.active {
      background-color: #fff;
      font-weight: bold;
      border-bottom: none;
    }
    .nested-content {
      border: 1px solid #ccc;
      padding: 10px;
      border-top: none;
      margin-bottom: 20px;
    }
    .counter {
      margin-top: 15px;
      display: flex;
      align-items: center;
      gap: 10px;
      flex-wrap: wrap;
    }
    .counter input[type="number"] {
      width: 80px;
      padding: 5px;
      font-size: 16px;
      text-align: center;
    }
    .counter button {
      padding: 5px 10px;
      font-size: 16px;
      cursor: pointer;
    }
    .add-Item {
      margin-top: 10px;
      display: inline-block;
      padding: 5px 10px;
      background-color: #4caf50;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }
    .add-Item:hover {
      background-color: #45a049;
    }
    .delete-Item {
      margin-top: 10px;
      background-color: #e53935;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 3px;
      cursor: pointer;
    }
    .delete-Item:hover {
      background-color: #d32f2f;
    }
    .readonly-list {
     padding: 10px;
     font-family: monospace;
     white-space: pre;
    } 
  </style>
</head>
<body>

  <div class="folder-bar">
    <div class="folder-tab active" data-folder="OfficeSupplies">Office Supplies</div>
    <div class="folder-tab" data-folder="TechEquipment">Tech Equipment</div>
    <div class="folder-tab" data-folder="Laptops">Laptops</div>
    <div class="folder-tab" data-folder="folderAll">All</div>
  </div>

  <div class="content">
    <div id="OfficeSupplies" class="folder-content active" data-folder-id="OfficeSupplies">
      <div class="nested-bar"></div>
      <button class="add-Item">+ Add Item</button>
    </div>
    <div id="TechEquipment" class="folder-content" data-folder-id="TechEquipment">
      <div class="nested-bar"></div>
      <button class="add-Item">+ Add Item</button>
    </div>
    <div id="Laptops" class="folder-content" data-folder-id="Laptops">
      <div class="nested-bar"></div>
      <button class="add-Item">+ Add Item</button>
    </div>
    <div id="folderAll" class="folder-content" data-folder-id="folderAll">
      <h2>All Items (Read-Only)</h2>
      <div class="readonly-list" id="allItemsList">
        <!-- Auto-generated -->
      </div>
    </div>
  </div>

  <script>
    const lastActiveNestedTab = {};
    let ItemCount = 0;

    const topTabs = document.querySelectorAll('.folder-tab');
    const topContents = document.querySelectorAll('.folder-content');

    topTabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const targetId = tab.getAttribute('data-folder');
        topTabs.forEach(t => t.classList.remove('active'));
        topContents.forEach(c => c.classList.remove('active'));
        tab.classList.add('active');
        const folderContent = document.getElementById(targetId);
        folderContent.classList.add('active');

         if (targetId === 'folderAll') {
        updateAllView();
      } else {
        const nestedTabs = folderContent.querySelectorAll('.nested-tab');
        const nestedContents = folderContent.querySelectorAll('.nested-content');
        const activeNestedId = lastActiveNestedTab[targetId] || (nestedTabs[0] && nestedTabs[0].dataset.nested);
        nestedTabs.forEach(t => t.classList.remove('active'));
        nestedContents.forEach(c => c.classList.remove('active'));
        if (activeNestedId) {
          folderContent.querySelector(`.nested-tab[data-nested="${activeNestedId}"]`)?.classList.add('active');
          folderContent.querySelector(`#${activeNestedId}`)?.classList.add('active');
        }
      }
    });
  });

    function setupNestedTabLogic(folderEl) {
      const tabs = folderEl.querySelectorAll('.nested-tab');
      const contents = folderEl.querySelectorAll('.nested-content');
      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          tabs.forEach(t => t.classList.remove('active'));
          contents.forEach(c => c.classList.remove('active'));
          tab.classList.add('active');
          folderEl.querySelector(`#${tab.dataset.nested}`).classList.add('active');
          const folderId = folderEl.getAttribute('data-folder-id');
          lastActiveNestedTab[folderId] = tab.dataset.nested;
        });
      });
    }

    function setupCounterLogic(container) {
      const buttons = container.querySelectorAll('button[data-change]');
      const input = container.querySelector('input[type="number"]');
      buttons.forEach(btn => {
        btn.addEventListener('click', () => {
          const change = parseInt(btn.dataset.change, 10);
          let current = parseInt(input.value || '0', 10);
          const min = parseInt(input.min || '0', 10);
          current = Math.max(current + change, min);
          input.value = current;
          updateAllView();
        });
      });
    }

    function setupDeleteButtons(folderEl) {
      const folderId = folderEl.getAttribute('data-folder-id');
      folderEl.querySelectorAll('.delete-Item').forEach(button => {
        button.addEventListener('click', () => {
          const tabId = button.dataset.tab;
          const tab = folderEl.querySelector(`.nested-tab[data-nested="${tabId}"]`);
          const content = folderEl.querySelector(`#${tabId}`);
          const isActive = tab.classList.contains('active');
          tab?.remove();
          content?.remove();

          if (isActive) {
            const tabs = folderEl.querySelectorAll('.nested-tab');
            const contents = folderEl.querySelectorAll('.nested-content');
            if (tabs.length > 0) {
              tabs[0].classList.add('active');
              contents[0].classList.add('active');
              lastActiveNestedTab[folderId] = tabs[0].dataset.nested;
            } else {
              lastActiveNestedTab[folderId] = null;
            }
          }
          setupNestedTabLogic(folderEl);
          setupDeleteButtons(folderEl);
          updateAllView();
        });
      });
    }

    document.querySelectorAll('.add-Item').forEach(button => {
      button.addEventListener('click', () => {
        const folderContent = button.closest('.folder-content');
        const folderId = folderContent.getAttribute('data-folder-id');
        const nestedBar = folderContent.querySelector('.nested-bar');
        const name = prompt('Enter Item name:');
        if (!name) return;
        const tabId = `${folderId}-sf${++ItemCount}`;

        const tab = document.createElement('div');
        tab.className = 'nested-tab';
        tab.dataset.nested = tabId;
        tab.textContent = name;

        const content = document.createElement('div');
        content.className = 'nested-content';
        content.id = tabId;
        content.innerHTML = `
          <h2>${folderId}/${name}</h2>
          <div class="counter">
            <label>Counter:</label>
            <button data-change="-10">-10</button>
            <button data-change="-1">-1</button>
            <input type="number" value="0" min="0">
            <button data-change="1">+1</button>
            <button data-change="10">+10</button>
          </div>
          <button class="delete-Item" data-tab="${tabId}">Delete Item</button>
        `;

        nestedBar.appendChild(tab);
        folderContent.appendChild(content);
        folderContent.querySelectorAll('.nested-tab').forEach(t => t.classList.remove('active'));
        folderContent.querySelectorAll('.nested-content').forEach(c => c.classList.remove('active'));
        tab.classList.add('active');
        content.classList.add('active');
        lastActiveNestedTab[folderId] = tabId;

        setupCounterLogic(content);
        setupNestedTabLogic(folderContent);
        setupDeleteButtons(folderContent);
        updateAllView();
      });
    });

    function updateAllView() {
      const list = document.getElementById('allItemsList');
      list.innerHTML = '';
      document.querySelectorAll('.folder-content').forEach(folder => {
        const folderId = folder.getAttribute('data-folder-id');
        if (folderId === 'folderAll') return;
        const Items = folder.querySelectorAll('.nested-content');
        Items.forEach(sub => {
          const title = sub.querySelector('h2')?.textContent || 'Unnamed';
          const input = sub.querySelector('input[type="number"]');
          const value = input ? input.value : '0';
          const entry = document.createElement('div');
          entry.textContent = `${title.trim()}: ${value}`;
          list.appendChild(entry);
        });
      });
    }

    // Initialize each folder with 1 Item
    document.querySelectorAll('.folder-content').forEach(folder => {
      const defaultTabId = `${folder.id}-default`;
      const nestedBar = folder.querySelector('.nested-bar');

      nestedBar.appendChild(tab);
      folder.appendChild(content);

      setupCounterLogic(content);
      setupNestedTabLogic(folder);
      setupDeleteButtons(folder);
      lastActiveNestedTab[folder.id] = defaultTabId;
    });

    updateAllView();
  </script>
</body>
</html>
